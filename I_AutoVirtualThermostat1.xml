<?xml version="1.0" encoding="UTF-8"?>
<implementation>
    <functions>
        -- -------------------------------------------------------------------------------------------------------------------------
        -- AutoVirtualThermostat -- Auto-changeover virtual thermostat for Vera/MiOS
        -- Copyright 2017 Patrick Rigney, All Rights Reserved
        -- http://www.toggledbits.com/avt/
        -- Reference: http://wiki.micasaverde.com/index.php/Luup_UPnP_Variables_and_Actions#HVAC_UserOperatingMode1
        -- Reference: http://upnp.org/specs/ha/UPnP-ha-HVAC_UserOperatingMode-v1-Service.pdf
        -- -------------------------------------------------------------------------------------------------------------------------
        function avtCleanup(p)
            if luup.variable_get("urn:micasaverde-com:serviceId:HaDevice1","Commands",tonumber(p)) == nil then 
                luup.log("AutoVirtualThermostat: no cleanup tasks remaining (good)")
                return 
            end
            local req = "http://127.0.0.1/port_3480/data_request?id=variableset&amp;DeviceNum=" .. p .. 
                "&amp;serviceId=urn:micasaverde-com:serviceId:HaDevice1&amp;Variable=Commands&amp;Value="
            local status, result = luup.inet.wget(req)
            -- luup.log("AutoVirtualThermostat: " .. req)
            if status ~= 0 then
                luup.log("AutoVirtualThermostat: Cleanup of Commands failed, status " .. tostring(status) .. ", result " .. tostring(result),1)
            end
        end
        
        function avtStart(dev)
            luup.log("AutoVirtualThermostat Plugin START-UP!")
            AutoVirtualThermostat = require("L_AutoVirtualThermostat1")
            avtRequestHandler = AutoVirtualThermostat.requestHandler
            luup.register_handler("avtRequestHandler", "AutoVirtualThermostat")
            luup.call_delay( 'avtCleanup', 90, tostring(dev) )
            return AutoVirtualThermostat.plugin_init(dev)
        end
        
        function avtWatchCallback( dev, svc, var, oldVal, newVal )
            AutoVirtualThermostat.handleWatch( dev, svc, var, oldVal, newVal, luup.device )
        end
        
        function avtDelayCallback( parm )
            AutoVirtualThermostat.runTask( parm, luup.device )
        end
    </functions>
    <startup>avtStart</startup>
    <actionList>
        <action>
            <serviceId>urn:upnp-org:serviceId:HVAC_UserOperatingMode1</serviceId>
            <name>SetModeTarget</name>
            <run>
                -- Change the operating to one of Off, HeatOn, CoolOn, AutoChangeOver
                -- receives NewModeTarget; variables ModeTarget/ModeStatus
                AutoVirtualThermostat.actionSetModeTarget( lul_device, lul_settings )
                return true
            </run>
        </action>
        <action>
            <serviceId>urn:upnp-org:serviceId:HVAC_UserOperatingMode1</serviceId>
            <name>GetModeTarget</name>
            <run>
                -- Luup takes care of returning relatedStateVariable
            </run>
        </action>
        <action>
            <serviceId>urn:upnp-org:serviceId:HVAC_UserOperatingMode1</serviceId>
            <name>GetModeStatus</name>
            <run>
                -- Luup takes care of returning relatedStateVariable
            </run>
        </action>
		<action>
			<serviceId>urn:upnp-org:serviceId:HVAC_UserOperatingMode1</serviceId>
			<name>SetEnergyModeTarget</name>
			<run>
                local newMode = lul_settings.NewModeTarget or lul_settings.NewEnergyModeTarget -- legacy/error
                AutoVirtualThermostat.actionSetEnergyModeTarget( lul_device, newMode )
                return true
			</run>
		</action>
        <action>
            <serviceId>urn:upnp-org:serviceId:HVAC_UserOperatingMode1</serviceId>
            <name>GetEnergyModeTarget</name>
            <run>
                -- Luup takes care of returning relatedStateVariable
            </run>
        </action>
        <action>
            <serviceId>urn:upnp-org:serviceId:HVAC_UserOperatingMode1</serviceId>
            <name>GetEnergyModeStatus</name>
            <run>
                -- Luup takes care of returning relatedStateVariable
            </run>
        </action>
        <action>
            <serviceId>urn:upnp-org:serviceId:HVAC_FanOperatingMode1</serviceId>
            <name>SetMode</name>
            <run>
                -- Sets fan operating mode to one of Auto, ContinousOn, PeriodicOn
                -- receives NewMode; related Mode, FanStatus ("On", "Off")
                AutoVirtualThermostat.actionSetFanMode( lul_device, lul_settings.NewMode )
                return true
            </run>
        </action>
        <action>
            <serviceId>urn:upnp-org:serviceId:HVAC_FanOperatingMode1</serviceId>
            <name>GetMode</name>
            <run>
                -- Luup takes care of returning relatedStateVariable
            </run>
        </action>
        <action>
            <serviceId>urn:upnp-org:serviceId:TemperatureSetpoint1</serviceId>
            <name>SetApplication</name>
            <run>
                -- Set application for setpoint. See http://upnp.org/specs/ha/UPnP-ha-TemperatureSetpoint-v1-Service.pdf
                -- receives NewApplication; related Application
                AutoVirtualThermostat.actionSetApplication( lul_device, lul_settings.NewApplication )
                return true
            </run>
        </action>
        <action>
            <serviceId>urn:upnp-org:serviceId:TemperatureSetpoint1</serviceId>
            <name>GetApplication</name>
            <run>
                -- Luup takes care of returning relatedStateVariable
            </run>
        </action>
        <action>
            <serviceId>urn:upnp-org:serviceId:TemperatureSetpoint1</serviceId>
            <name>SetCurrentSetpoint</name>
            <run>
                -- Set temperature setpoint. Semantics of this on dual-mode thermostats depends on setting of Application.
                -- See http://upnp.org/specs/ha/UPnP-ha-TemperatureSetpoint-v1-Service.pdf
                -- N.B. Should not be called without calling SetApplication first!
                AutoVirtualThermostat.actionSetCurrentSetpoint( lul_device, lul_settings.NewCurrentSetpoint )
                return true
            </run>
        </action>
        <action>
            <serviceId>urn:upnp-org:serviceId:TemperatureSetpoint1</serviceId>
            <name>GetCurrentSetpoint</name>
            <run>
                -- Get current setpoint. Take Application into account.
                -- N.B. Should not be called without calling SetApplication first!
                local app = luup.variable_get( "urn:upnp-org:serviceId:TemperatureSetpoint1", "Application", lul_device ) or "DualHeatingCooling"
                if app == "Heating" then
                    luup.variable_set( "urn:upnp-org:serviceId:TemperatureSetpoint1", "CurrentSetpoint", 
                        luup.variable_get( "urn:toggledbits-com:serviceId:AutoVirtualThermostat1", "SetpointHeating", lul_device ), lul_device )
                elseif app == "Cooling" then
                    luup.variable_set( "urn:upnp-org:serviceId:TemperatureSetpoint1", "CurrentSetpoint",
                        luup.variable_get( "urn:toggledbits-com:serviceId:AutoVirtualThermostat1", "SetpointCooling", lul_device ), lul_device )
                end
                -- Don't REALLY need this, because Luup seems to fetch and return the value on its own (via relatedStateVariable in S_).
                return luup.variable_get( "urn:upnp-org:serviceId:TemperatureSetpoint1", "CurrentSetpoint", lul_device )
            </run>
        </action>
        <action>
            <serviceId>urn:upnp-org:serviceId:TemperatureSetpoint1_Heat</serviceId>
            <name>SetCurrentSetpoint</name>
            <run>
                -- Set temperature setpoint for heating (convenience function to mimic other devices, but this is incompletely defined).
luup.log("urn:upnp-org:serviceId:TemperatureSetpoint1_Heat/SetCurrentSetpoint")   
                AutoVirtualThermostat.actionSetCurrentSetpoint( lul_device, lul_settings.NewCurrentSetpoint, "Heating" )
                return true
            </run>
        </action>
        <action>
            <serviceId>urn:upnp-org:serviceId:TemperatureSetpoint1_Heat</serviceId>
            <name>GetCurrentSetpoint</name>
            <run>
                -- Get temperature setpoint for heating (convenience function to mimic other devices, but this is incompletely defined).
                local currSP = luup.variable_get( "urn:toggledbits-com:serviceId:AutoVirtualThermostat1", "SetpointHeating", lul_device )
                -- Force value of CurrentSetpoint, because it's the "relatedStateVariable" as defined in S_.xml
                luup.variable_set( "urn:upnp-org:serviceId:TemperatureSetpoint1", "CurrentSetpoint", currSP, lul_device )
                -- Don't REALLY need this, because Luup fetches and returns the value on its own (via relatedStateVariable in S_).
                return currSP
            </run>
        </action>
        <action>
            <serviceId>urn:upnp-org:serviceId:TemperatureSetpoint1_Cool</serviceId>
            <name>SetCurrentSetpoint</name>
            <run>
                -- Set temperature setpoint for cooling (convenience function to mimic other devices, but this is incompletely defined).
luup.log("urn:upnp-org:serviceId:TemperatureSetpoint1_Cool/SetCurrentSetpoint")   
                AutoVirtualThermostat.actionSetCurrentSetpoint( lul_device, lul_settings.NewCurrentSetpoint, "Cooling" )
                return true
            </run>
        </action>
        <action>
            <serviceId>urn:upnp-org:serviceId:TemperatureSetpoint1_Cool</serviceId>
            <name>GetCurrentSetpoint</name>
            <run>
                -- Get temperature setpoint for cooling (convenience function to mimic other devices, but this is incompletely defined).
                local currSP = luup.variable_get( "urn:toggledbits-com:serviceId:AutoVirtualThermostat1", "SetpointCooling", lul_device )
                -- Force value of CurrentSetpoint, because it's the "relatedStateVariable" as defined in S_.xml
                luup.variable_set( "urn:upnp-org:serviceId:TemperatureSetpoint1", "CurrentSetpoint", currSP, lul_device )
                -- Don't REALLY need this, because Luup fetches and returns the value on its own (via relatedStateVariable in S_).
                return currSP
            </run>
        </action>
        <action>
            <serviceId>urn:toggledbits-com:serviceId:AutoVirtualThermostat1</serviceId>
            <name>SetCurrentSetpoint</name>
            <run>
                -- Set heating/cooling/dual setpoint. Goes through UPnP TemperatureSetpoint1, so we need to set application. See above.
                local app = lul_settings.Application or "DualHeatingCooling"
                AutoVirtualThermostat.actionSetCurrentSetpoint( lul_device, lul_settings.NewCurrentSetpoint, app )
                return true
            </run>
        </action>
        <action>
            <serviceId>urn:toggledbits-com:serviceId:AutoVirtualThermostat1</serviceId>
            <name>SetCoolingSetpoint</name>
            <run>
                -- Set cooling setpoint. Although there are other ways to get this done, this action exists because Vera UI7 handling
                -- of service is inconsistent in spinner_horizontal (that is, action uses display's service instead of service specified in action).
                AutoVirtualThermostat.actionSetCurrentSetpoint( lul_device, lul_settings.NewCoolingSetpoint, "Cooling" )
                return true
            </run>
        </action>
        <action>
            <serviceId>urn:toggledbits-com:serviceId:AutoVirtualThermostat1</serviceId>
            <name>SetHeatingSetpoint</name>
            <run>
                -- Set heating setpoint. Although there are other ways to get this done, this action exists because Vera UI7 handling
                -- of service is inconsistent in spinner_horizontal (that is, action uses display's service instead of service specified in action).
                AutoVirtualThermostat.actionSetCurrentSetpoint( lul_device, lul_settings.NewHeatingSetpoint, "Heating" )
                return true
            </run>
        </action>
        <action>
            <serviceId>urn:toggledbits-com:serviceId:AutoVirtualThermostat1</serviceId>
            <name>GetCurrentSetpoint</name>
            <run>
                -- Set heating/cooling/dual setpoint. Goes through UPnP TemperatureSetpoint1, so we need to set application. See above.
                local app = lul_settings.Application or "DualHeatingCooling"
                luup.call_action( "urn:upnp-org:serviceId:TemperatureSetpoint1", "SetApplication", { NewApplication=app }, lul_device )
                luup.call_action( "urn:upnp-org:serviceId:TemperatureSetpoint1", "GetCurrentSetpoint", lul_settings, lul_device ) -- call other service, pass all
                return true
            </run>
        </action>
        <action>
            <serviceId>urn:toggledbits-com:serviceId:AutoVirtualThermostat1</serviceId>
            <name>SetDebug</name>
            <run>
                AutoVirtualThermostat.actionSetDebug( lul_device, lul_settings.debug )
                return true
            </run>
        </action>
        <action>
            <serviceId>urn:toggledbits-com:serviceId:AutoVirtualThermostat1</serviceId>
            <name>getinfo</name>
            <run>
                AutoVirtualThermostat.getinfo( lul_device )
                return true
            </run>
        </action>
    </actionList>
</implementation>
